//
//  WYMaterialButton.swift
//  WYMaterialButton
//
//  Created by Wang Yu on 9/24/15.
//
//

import UIKit
import QuartzCore
import pop

let presetMaterialColor = UIColor(red:0.93, green:0.94, blue:0.95, alpha:0.2)

@IBDesignable
open class WYMaterialButton: DesignableButton {

    open var animationDuration = 0.6
    open var pulseDuration = 0.2
    
    @IBInspectable
    open var materialColor: UIColor = UIColor.clear {
        didSet {
            self.materialBackgroundView.backgroundColor = self.materialColor
            self.backgroundColor                        = self.materialColor
            self.materialPressedColor                   = autoGenerateDeeperColor(self.materialColor)
        }
    }
    
    @IBInspectable
    open var materialPressedColor: UIColor = presetMaterialColor {
        didSet {
            self.materialPressedView.backgroundColor = self.materialPressedColor
        }
    }

    @IBInspectable
    open var pulseEnable: Bool = true
    @IBInspectable
    open var touchLocationEnable: Bool = true
    @IBInspectable
    open var materialEffectPercent: CGFloat = 0.9 {
        didSet {
            self.materialEffectPercent = self.materialEffectPercent * 1.1
            self.configureMaterialPressedView()
        }
    }
    
    open func autoGenerateDeeperColor(_ color: UIColor) -> UIColor {
        let colorComponent = color.cgColor.components
        let newRed         = max((colorComponent?[0])! - 0.05, 0)
        let newGreen       = max((colorComponent?[1])! - 0.1, 0)
        let newBlue        = max((colorComponent?[2])! - 0.13, 0)
        return UIColor(red: newRed, green: newGreen, blue: newBlue, alpha: 1)
    }
    
    open func autoGenerateContrastColor(_ color: UIColor) -> UIColor {
        let colorComponent: [CGFloat] = color.cgColor.components!
        var d: CGFloat = 0
        let a = 1 - (0.299 * colorComponent[0] + 0.587 * colorComponent[1] + 0.114 * colorComponent[2])
        d = a < 0.5 ? 0 : 1
        return UIColor(red: d, green: d, blue: d, alpha: 1)
    }
    
    public required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        configure()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        configure()
    }
    
    open override func layoutSubviews() {
        super.layoutSubviews()
        
        let trackingCenter = self.materialPressedView.center
        self.configureMaterialPressedView()
        
        self.materialPressedView.center = self.touchLocationEnable ? trackingCenter : self.materialPressedView.center
        self.materialBackgroundView.layer.frame = self.bounds
        
        let buttonMask = CAShapeLayer()
        buttonMask.path = UIBezierPath(roundedRect: self.bounds, cornerRadius: self.cornerRadius).cgPath
        self.materialBackgroundView.layer.mask = buttonMask
    }
    
    fileprivate func configure() {
        self.configureMaterialPressedView()
        self.configureMaterialBackgroundView()
        self.materialBackgroundView.alpha = 0
        self.addTarget(self, action: #selector(WYMaterialButton.scaleToSmall), for: [.touchDragEnter, .touchDown])
        self.addTarget(self, action: #selector(WYMaterialButton.scaleAnimation), for: .touchUpInside)
        self.addTarget(self, action: #selector(WYMaterialButton.scaleToDefault), for: .touchDragExit)
    }
    
    func scaleToSmall() {
        guard pulseEnable else { return }
        let scaleAnimation = POPBasicAnimation(propertyNamed: kPOPLayerScaleXY)
        scaleAnimation?.toValue = NSValue(cgSize: CGSize(width: 0.95, height: 0.95))
        self.layer.pop_add(scaleAnimation, forKey: "layerScaleSmallAnimation")
    }
    
    func scaleAnimation() {
        guard pulseEnable else { return }
        let scaleAnimation = POPSpringAnimation(propertyNamed: kPOPLayerScaleXY)
        scaleAnimation?.velocity = NSValue(cgSize: CGSize(width: 3, height: 3))
        scaleAnimation?.toValue = NSValue(cgSize: CGSize(width: 1, height: 1))
        scaleAnimation?.springBounciness = 18.0
        self.layer.pop_add(scaleAnimation, forKey: "layerScaleSpringAnimation")
    }
    
    func scaleToDefault() {
        guard pulseEnable else { return }
        let scaleAnimation = POPBasicAnimation(propertyNamed: kPOPLayerScaleXY)
        scaleAnimation?.toValue = NSValue(cgSize: CGSize(width: 1, height: 1))
        self.layer.pop_add(scaleAnimation, forKey: "layerScaleDefaultAnimation")
    }
    
    let materialPressedView = UIView()
    fileprivate func configureMaterialPressedView() {
        let materialEffectBounds: CGFloat = self.bounds.width * materialEffectPercent
        self.materialPressedView.frame = CGRect(x: self.bounds.midX - materialEffectBounds/2, y: self.bounds.midY - materialEffectBounds/2, width: materialEffectBounds, height: materialEffectBounds)
        self.materialPressedView.backgroundColor = self.materialPressedColor
        self.materialPressedView.layer.cornerRadius = materialEffectBounds/2
    }
    
    let materialBackgroundView = UIView()
    fileprivate func configureMaterialBackgroundView() {
        self.materialBackgroundView.backgroundColor = self.materialColor
        self.materialBackgroundView.frame = self.bounds
        self.layer.addSublayer(materialBackgroundView.layer)
        self.materialBackgroundView.layer.addSublayer(self.materialPressedView.layer)
    }
    

    open override func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {
        self.materialBackgroundView.alpha = 1
        self.materialPressedView.center = touch.location(in: self)
        self.materialPressedView.transform = CGAffineTransform(scaleX: 0.6, y: 0.6)

        
        UIView.animate(withDuration: animationDuration, delay: 0, options: [.curveEaseOut, .allowUserInteraction, .allowAnimatedContent], animations: {
            self.materialPressedView.center = self.materialBackgroundView.center
            self.materialPressedView.transform = CGAffineTransform.identity
        }, completion: nil)
        
        return super.beginTracking(touch, with: event)
    }
    
    open override func cancelTracking(with event: UIEvent?) {
        super.cancelTracking(with: event)
        UIView.animate(withDuration: 0.1, delay: 0, options: [.allowUserInteraction, .allowAnimatedContent], animations: {
            self.materialBackgroundView.alpha = 1
        }) { _ in
            UIView.animate(withDuration: self.animationDuration, delay: 0, options: [.curveEaseOut, .allowUserInteraction], animations: { () -> Void in
                self.materialBackgroundView.alpha = 0
            }, completion: nil)
        }
    }
    
    open override func endTracking(_ touch: UITouch?, with event: UIEvent?) {
        super.endTracking(touch, with: event)
        UIView.animate(withDuration: 0.1, delay: 0, options: [.allowUserInteraction, .allowAnimatedContent], animations: {
            self.materialBackgroundView.alpha = 1
        }) { _ in
            UIView.animate(withDuration: self.animationDuration, delay: 0, options: [.curveEaseOut, .allowUserInteraction], animations: { () -> Void in
                self.materialBackgroundView.alpha = 0
            }, completion: nil)
        }
    }
}
